// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=inst15);
    Mux16(a=ALUoutput, b=instruction, sel=inst15, out=outMuxA);
    And(a=true, b=instruction[15], out=outAndA);
    And(a=outAndA, b=instruction[5], out=outAndB);
    Or(a=outAndB, b=inst15, out=outOrA);
    ARegister(in=outMuxA, load=outOrA, out=outRegisterA, out[0..14]= addressM);

    And(a=outAndA, b=instruction[4], out=outAndC);
    DRegister(in=ALUoutput, load=outAndC, out=outRegisterD);


    And(a=instruction[12], b=outAndA, out=Anda);
    And(a=instruction[11], b=outAndA, out=Andc1);
    And(a=instruction[10], b=outAndA, out=Andc2);
    And(a=instruction[9], b=outAndA, out=Andc3);
    And(a=instruction[8], b=outAndA, out=Andc4);
    And(a=instruction[7], b=outAndA, out=Andc5);
    And(a=instruction[6], b=outAndA, out=Andc6);

    Mux16(a=outRegisterA, b=inM, sel=Anda, out=outMuxB);

    ALU(x=outRegisterD, y=outMuxB, zx=Andc1, nx=Andc2, zy=Andc3, ny=Andc4, f=Andc5, no=Andc6, out=outM, out = ALUoutput, zr=zr, ng=ng);

    Or(a=ng, b=zr, out=outOrB);
    Not(in=outOrB, out=notOutOrB);

    And(a=outAndA, b=instruction[2], out=Andj1);
    And(a=outAndA, b=instruction[1], out=Andj2);
    And(a=outAndA, b=instruction[0], out=Andj3);

    And(a=ng, b=Andj1, out=outAndD);
    And(a=zr, b=Andj2, out=outAndE);
    And(a=notOutOrB, b=Andj3, out=outAndF);

    Or(a=outAndD, b=outAndE, out=outOrC);
    Or(a=outOrC, b=outAndF, out=outOrD);

    PC(in=outRegisterA, load=outOrD, inc=true, reset=reset, out[0..14]=pc);

    And(a=outAndA, b=instruction[3], out=writeM);
    
    }